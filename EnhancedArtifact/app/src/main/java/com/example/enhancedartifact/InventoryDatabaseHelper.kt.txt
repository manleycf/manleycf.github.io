package com.example.enhancedartifact

import android.content.Context
import android.database.sqlite.SQLiteDatabase
import android.database.sqlite.SQLiteOpenHelper
import android.database.Cursor
import android.content.ContentValues

class InventoryDatabaseHelper(context: Context, private val userId: Int) : SQLiteOpenHelper(context, DATABASE_NAME, null, DATABASE_VERSION) {

    // creates inventory table
    override fun onCreate(db: SQLiteDatabase) {
        db.execSQL(SQL_CREATE_INVENTORY_TABLE)
    }

    // handles upgrades
    override fun onUpgrade(db:SQLiteDatabase, oldVersion: Int, newVersion: Int) {
        db.execSQL("DROP TABLE IF EXISTS inventory")
        onCreate(db)
    }

    // gets all items from table to display on Inventory screen
    fun getAllItems(): Cursor {
        val db = readableDatabase
        return db.rawQuery("SELECT * FROM inventory WHERE user_id = ?", arrayOf(userId.toString()))
    }

    // adds items with user_id
    fun addItem(name: String, quantity: Int) {
        val db = writableDatabase
        val values = ContentValues().apply {
            put("item_name", name)
            put("quantity", quantity)
            put("user_id", userId)
        }
        db.insert("inventory", null, values)
        db.close()
    }

    // deletes items with name and user_id
    fun deleteItem(name: String) {
        val db = writableDatabase
        val whereClause = "item_name = ? AND user_id = ?"
        val whereArgs = arrayOf(name, userId.toString())
        db.delete("inventory", whereClause, whereArgs)
        db.close()
    }

    // updates items
    fun editItem(itemName: String, newQuantity: Int) {
        val db = writableDatabase
        val values = ContentValues().apply{
            put("Quantity", newQuantity)
        }
        db.update("inventory", values, "item_name = ? AND user_id = ?", arrayOf(itemName, userId.toString()))
        db.close()
    }

    companion object {
        private const val DATABASE_NAME = "inventory_database.db"
        private const val DATABASE_VERSION = 1

        private const val SQL_CREATE_INVENTORY_TABLE = """
            CREATE TABLE inventory (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            item_name TEXT,
            quantity INTEGER,
            user_id INTEGER,
            FOREIGN KEY(user_id) REFERENCES users(id)
            )
        """
    }
}
